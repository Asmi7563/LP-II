def is_safe(board, row, col):
    # Check if there is a queen in the same column
    for i in range(row):
        if board[i] == col:
            return False

        # Check diagonals
        if abs(board[i] - col) == abs(i - row):
            return False

    return True

def solve_queens_backtracking(board, row):
    n = len(board)

    # Base case: If all queens are placed, return True
    if row == n:
        return True

    for col in range(n):
        if is_safe(board, row, col):
            board[row] = col
            if solve_queens_backtracking(board, row + 1):
                return True
            board[row] = -1

    return False

def solve_queens_branch_and_bound(board, row):
    n = len(board)

    if row == n:
        return True

    for col in range(n):
        if is_safe(board, row, col):
            board[row] = col
            if solve_queens_branch_and_bound(board, row + 1):
                return True
            board[row] = -1
    return False

def solve_n_queens_with_backtracking(n):
    board = [-1] * n
    if not solve_queens_backtracking(board, 0):
        print("No solution exists for backtracking.")
    else:
        print("Solution using backtracking:")
        print_solution(board)

def solve_n_queens_with_branch_and_bound(n):
    board = [-1] * n
    if not solve_queens_branch_and_bound(board, 0):
        print("No solution exists for branch-and-bound.")
    else:
        print("Solution using branch-and-bound:")
        print_solution(board)

def print_solution(board):
    n = len(board)
    for i in range(n):
        for j in range(n):
            if board[i] == j:
                print("Q", end=" ")
            else:
                print(".", end=" ")
        print()

# Example usage:
n = 8
print("For", n, "queens:")
solve_n_queens_with_backtracking(n)
solve_n_queens_with_branch_and_bound(n)
